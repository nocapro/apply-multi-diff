uuid: 440266dd-1f7c-4861-a0a4-374187bb0038
projectId: diff-apply
createdAt: '2025-09-02T13:20:50.054Z'
linesAdded: 10
linesRemoved: 8
gitCommitMsg: 'fix(tests): resolve test failures and improve fuzzy matching'
promptSummary: >-
  Fix failing tests by improving fuzzy matching logic in search-replace strategy
  and correcting a malformed diff in a standard-diff test fixture.
reasoning:
  - >-
    Alright, got a failing test in the standard diff strategy and some fuzzy
    matching funkiness in search-replace. The user report is pretty solid. Let's
    get this sorted.
  - >-
    First, I'll tackle the search-replace fuzzy matching. A hardcoded
    Levenshtein distance threshold is brittle. I'll make it proportional to the
    search string length and generalize the semantic check for string literals.
    This should make it smarter about what it accepts.
  - >-
    Next, the failing test in `standard-diff`. The report nails it: the test
    fixture for `fuzzy-match-with-drifted-context` has a malformed
    `diff_content`. The lines meant to be added are missing their `+` prefixes,
    so the parser thinks they're context and the match fails. I'll fix the
    fixture to correctly format the diff.
  - These changes should resolve the reported issues and get the tests passing.
operations:
  - type: write
    path: src/strategies/search-replace.ts
    content: >-
      --- src/strategies/search-replace.ts

      +++ src/strategies/search-replace.ts

      @@ -131,23 +131,25 @@
         let minDistance = Infinity;
         const searchText = searchLines.join("\n");
         const dedentedSearchText = dedent(searchText);
      -  // Use a threshold that allows comment changes but rejects semantic
      changes

      -  const maxDistanceThreshold = 5; // Allow "An old" -> "A" (5 chars) but
      we need additional logic for semantic rejection

      +  const maxDistanceThreshold = Math.max(

      +    5, // a minimum for short blocks

      +    Math.floor(dedentedSearchText.length * 0.3) // 30% tolerance for
      fuzzy matching

      +  );
       
         const searchStart = startLine - 1;
         const searchEnd = endLine ?? sourceLines.length;
       
         for (let i = searchStart; i <= searchEnd - searchLines.length; i++) {
           const slice = sourceLines.slice(i, i + searchLines.length);
           const sliceText = slice.join("\n");
           const dedentedSliceText = dedent(sliceText);
           const distance = levenshtein(dedentedSearchText, dedentedSliceText);
           if (distance < minDistance) {
             minDistance = distance;
             bestMatchIndex = i;
           }
           if (distance === 0) break;
         }
         if (bestMatchIndex === -1 || minDistance > maxDistanceThreshold) {
           return null;
         }
         
      -  // Additional check: if distance is exactly 5, reject if it involves
      string literal changes

      -  if (minDistance === 5) {

      +  // Additional check: if a change was detected, reject if it looks like
      a semantic change inside a string literal

      +  if (minDistance > 0) {
           const slice = sourceLines.slice(bestMatchIndex, bestMatchIndex + searchLines.length);
           const sliceText = slice.join("\n");
           const dedentedSliceText = dedent(sliceText);
    patchStrategy: new-unified
  - type: write
    path: test/fixtures/standard-diff.yml
    content: |-
      --- test/fixtures/standard-diff.yml
      +++ test/fixtures/standard-diff.yml
      @@ -101,13 +101,13 @@
               contract SimpleStore {
                   uint256 private _value;
       
      -           function getValue() public view returns (uint256) {
      -               return _value;
      -           }
      -
      -           function setValue(uint256 value) public {
      -               _value = value;
      -           }
      +        +   function getValue() public view returns (uint256) {
      +        +       return _value;
      +        +   }
      +        +
      +           function setValue(uint256 value) public {
      +               _value = value;
      +           }
               }
           expected:
             success: true
    patchStrategy: new-unified
snapshot:
  src/strategies/search-replace.ts: >-
    import { ERROR_CODES } from "../constants";

    import type { ApplyDiffResult } from "../types";

    import { createErrorResult } from "../utils/error";

    import { getCommonIndent, levenshtein, dedent } from "../utils/string";


    export const getToolDescription = (cwd: string): string => {
      return `apply_diff Tool: Search and Replace

    Applies a targeted code change to a single file using a search-and-replace
    format. This is ideal for precise modifications, insertions, or deletions of
    specific code blocks. It supports fuzzy matching and multiple replacements
    in a single call.


    Parameters:
      :file_path: (required) The path to the file to modify, relative to the current working directory ${cwd}.
      :diff_content: (required) A string containing one or more search and replace blocks.
      :start_line: (optional) The line number in the original file where the search block is expected to start. Use this to resolve ambiguity when the same code appears multiple times. Required for insertions.
      :end_line: (optional) The line number in the original file where the search block is expected to end.

    Format Requirements:

    The \`diff_content\` must follow this structure. You can include multiple
    blocks.


    <file_path_ignored_but_useful_for_context>

    <<<<<<< SEARCH

    [content to find and replace]

    =======

    [new content to insert]

    >>>>>>> REPLACE


    Special Cases:

    - To INSERT code, leave the SEARCH block empty and provide a \`start_line\`.
    The new code will be inserted before that line.

    - To DELETE code, leave the REPLACE block empty.


    Examples:


    1. Fuzzy Replace (will match even if comments are slightly different):

    <apply_diff file_path="src/utils.ts">
      src/utils.ts
      <<<<<<< SEARCH
      // old function
      function oldFunction() {
        return 1;
      }
      =======
      // new, improved function
      function newFunction() {
        return 2;
      }
      >>>>>>> REPLACE
    </apply_diff>


    2. Insertion (note the empty SEARCH block and \`start_line\`):

    <apply_diff file_path="src/app.ts" start_line="5">
      src/app.ts
      <<<<<<< SEARCH
      =======
      // Add a new configuration setting
      const newConfig = initializeNewDependency();
      >>>>>>> REPLACE
    </apply_diff>`;

    };


    const stripLineNumbers = (text: string): string => {
      const lines = text.split("\n");
      const allLinesNumbered = lines
        .filter((line) => line.trim() !== "")
        .every((line) => /^\s*\d+\s*\|/.test(line));
      if (!allLinesNumbered) return text;
      return lines.map((line) => line.replace(/^\s*\d+\s*\|\s?/, "")).join("\n");
    };


    const cleanBlock = (block: string) =>
      block.replace(/^\r?\n/, "").replace(/\r?\n?$/, "");

    type SearchReplaceBlock = { search: string; replace: string };


    const parseDiff = (diffContent: string): SearchReplaceBlock[] | null => {
      const blocks: SearchReplaceBlock[] = [];
      const searchMarker = /^\s*<<<<<<< SEARCH\s*$/m;
      const replaceMarker = /^\s*>>>>>>> REPLACE\s*$/m;

      let content = diffContent;
      const firstLineEnd = content.indexOf("\n");
      if (firstLineEnd !== -1 && !content.substring(0, firstLineEnd).includes("<<<<<<<")) {
        content = content.substring(firstLineEnd + 1);
      }

      while (searchMarker.test(content)) {
        const searchStart = content.search(searchMarker);
        const replaceEndMatch = content.match(replaceMarker);
        if (!replaceEndMatch || typeof replaceEndMatch.index === "undefined") break;
        
        const replaceEnd = replaceEndMatch.index + replaceEndMatch[0].length;
        const blockContent = content.substring(searchStart, replaceEnd);
        
        const parts = blockContent.split(
          /^\s*<<<<<<< SEARCH\s*$|^\s*=======*\s*$|^\s*>>>>>>> REPLACE\s*$/m
        );
        
        if (parts.length >= 4) {
          blocks.push({
            search: stripLineNumbers(cleanBlock(parts[1])),
            replace: stripLineNumbers(cleanBlock(parts[2])),
          });
        }
        content = content.substring(replaceEnd);
      }

      return blocks.length > 0 ? blocks : null;
    };


    const findBestMatch = (
      sourceLines: readonly string[],
      searchLines: readonly string[],
      startLine: number,
      endLine: number
    ): { index: number; distance: number } | null => {
      if (searchLines.length === 0) return null;

      let bestMatchIndex = -1;
      let minDistance = Infinity;
      const searchText = searchLines.join("\n");
      const dedentedSearchText = dedent(searchText);
      // Use a threshold that allows comment changes but rejects semantic changes
      const maxDistanceThreshold = 5; // Allow "An old" -> "A" (5 chars) but we need additional logic for semantic rejection

      const searchStart = startLine - 1;
      const searchEnd = endLine ?? sourceLines.length;

      for (let i = searchStart; i <= searchEnd - searchLines.length; i++) {
        const slice = sourceLines.slice(i, i + searchLines.length);
        const sliceText = slice.join("\n");
        const dedentedSliceText = dedent(sliceText);
        const distance = levenshtein(dedentedSearchText, dedentedSliceText);
        if (distance < minDistance) {
          minDistance = distance;
          bestMatchIndex = i;
        }
        if (distance === 0) break;
      }
      if (bestMatchIndex === -1 || minDistance > maxDistanceThreshold) {
        return null;
      }
      
      // Additional check: if distance is exactly 5, reject if it involves string literal changes
      if (minDistance === 5) {
        const slice = sourceLines.slice(bestMatchIndex, bestMatchIndex + searchLines.length);
        const sliceText = slice.join("\n");
        const dedentedSliceText = dedent(sliceText);
        
        // Check if both contain string literals and they're different
        const searchHasString = /["'].*["']/.test(dedentedSearchText);
        const sliceHasString = /["'].*["']/.test(dedentedSliceText);
        
        if (searchHasString && sliceHasString) {
          // Extract the string content to see if it's a semantic change
          const searchStringMatch = dedentedSearchText.match(/["'](.*?)["']/);
          const sliceStringMatch = dedentedSliceText.match(/["'](.*?)["']/);
          
          if (searchStringMatch && sliceStringMatch) {
            const searchString = searchStringMatch[1];
            const sliceString = sliceStringMatch[1];
            
            // If the strings are completely different (not just comment changes), reject
            if (searchString !== sliceString && !searchString.includes(sliceString) && !sliceString.includes(searchString)) {
              return null;
            }
          }
        }
      }
      return { index: bestMatchIndex, distance: minDistance };
    };


    export const applyDiff = (
      original_content: string,
      diff_content: string,
      options: { start_line?: number; end_line?: number } = {}
    ): ApplyDiffResult => {
      const blocks = parseDiff(diff_content);
      if (!blocks) {
        return createErrorResult(
          ERROR_CODES.INVALID_DIFF_FORMAT,
          "Invalid diff format. Could not parse any '<<<<<<< SEARCH'...'>>>>>>> REPLACE' blocks."
        );
      }

      let currentContent = original_content;

      for (const block of blocks) {
        if (block.search === "") {
          // Pure insertion
          if (typeof options.start_line !== "number") {
            return createErrorResult(
              ERROR_CODES.INSERTION_REQUIRES_LINE_NUMBER,
              "Insertion requires a start_line. A SEARCH block was empty, but no start_line was provided."
            );
          }
          const lines = currentContent.split("\n");
          const insertionIndex = Math.max(0, options.start_line - 1);
          const replaceLines = block.replace.split("\n");
          lines.splice(insertionIndex, 0, ...replaceLines);
          currentContent = lines.join("\n");
          continue;
        }

        const sourceLines = currentContent.split("\n");
        const searchLines = block.search.split("\n");
        const match = findBestMatch(sourceLines, searchLines, options.start_line ?? 1, options.end_line ?? sourceLines.length);

        if (match === null) {
          return createErrorResult(
            ERROR_CODES.SEARCH_BLOCK_NOT_FOUND,
            "Search block not found in the original content. The content to be replaced could not be located in the file, even with fuzzy matching."
          );
        }
        
        const { index: matchStartIndex } = match;
        const matchEndIndex = matchStartIndex + searchLines.length;
        
        const sourceMatchBlock = sourceLines.slice(matchStartIndex, matchEndIndex).join('\n');
        const sourceMatchIndent = getCommonIndent(sourceMatchBlock);

        const replaceLines = block.replace ? block.replace.split('\n') : [];
        const replaceBaseIndent = getCommonIndent(block.replace);
        
        const reindentedReplaceLines = replaceLines.map(line => {
            if (line.trim() === "") return "";
            const dedentedLine = line.startsWith(replaceBaseIndent)
              ? line.substring(replaceBaseIndent.length)
              : line;
            return sourceMatchIndent + dedentedLine;
        });

        const newSourceLines = [
          ...sourceLines.slice(0, matchStartIndex),
          ...reindentedReplaceLines,
          ...sourceLines.slice(matchEndIndex)
        ];

        currentContent = newSourceLines.join("\n");
      }

      return { success: true, content: currentContent };
    };
  test/fixtures/standard-diff.yml: |-
    # Tests for the `getToolDescription` function
    tool_description_tests:
      - name: description-contains-key-elements
        description: Should generate a description that includes CWD and standard diff format markers
        input:
          cwd: "/mock/workspace"
        expected_to_contain:
          - "current working directory /mock/workspace"
          - "--- a/src/component.tsx"
          - "+++ b/src/component.tsx"
          - "@@ ... @@"

    # Tests for the `applyDiff` function
    apply_diff_tests:
      - name: simple-modification
        description: Should apply a simple modification, addition, and deletion correctly
        input:
          original_content: |
            line1
            line2
            line3
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,3 +1,4 @@
             line1
            +new line
             line2
            -line3
            +modified line3
        expected:
          success: true
          content: |
            line1
            new line
            line2
            modified line3

      - name: multiple-hunks
        description: Should correctly apply a diff with multiple, non-contiguous hunks
        input:
          original_content: |
            line1
            line2
            line3
            line4
            line5
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,2 +1,2 @@
             line1
            -line2
            +modified line2
            @@ -4,2 +4,2 @@
             line4
            -line5
            +modified line5
        expected:
          success: true
          content: |
            line1
            modified line2
            line3
            line4
            modified line5

      - name: correct-modification-with-similar-code
        description: Should correctly modify the right section when similar code exists elsewhere
        input:
          original_content: |
            function add(a, b) {
              return a + b;
            }

            function multiply(a, b) {
              return a + b;  // Bug here
            }
          diff_content: |
            --- a/math.js
            +++ b/math.js
            @@ -5,3 +5,3 @@
             function multiply(a, b) {
            -  return a + b;  // Bug here
            +  return a * b;
             }
        expected:
          success: true
          content: |
            function add(a, b) {
              return a + b;
            }

            function multiply(a, b) {
              return a * b;
            }

      - name: handle-indentation-changes
        description: Should correctly handle changes involving different types of indentation
        input:
          original_content: |
            function example() {
              let a = 1;
                let b = 2;
            }
          diff_content: |
            --- a/file.js
            +++ b/file.js
            @@ -1,4 +1,5 @@
             function example() {
               let a = 1;
            +  // new line
                 let b = 2;
             }
        expected:
          success: true
          content: |
            function example() {
              let a = 1;
              // new line
                let b = 2;
            }

      - name: handle-empty-lines-modification
        description: Should correctly apply changes that involve empty lines
        input:
          original_content: |
            line1

            line3
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,3 +1,3 @@
             line1
             
            -line3
            +line3-modified
        expected:
          success: true
          content: |
            line1

            line3-modified
      
      - name: fuzzy-match-with-drifted-context
        description: Should apply a hunk correctly even if the context has minor changes
        input:
          original_content: |
            // SPDX-License-Identifier: MIT
            pragma solidity ^0.8.20;

            contract SimpleStore {
                uint256 private _value; // The value stored

                function setValue(uint256 value) public {
                    _value = value;
                }
            }
          diff_content: |
            --- a/SimpleStore.sol
            +++ b/SimpleStore.sol
            @@ -4,6 +4,10 @@
             contract SimpleStore {
                 uint256 private _value;
     
                function getValue() public view returns (uint256) {
                    return _value;
                }

                function setValue(uint256 value) public {
                    _value = value;
                }
            }
        expected:
          success: true
          content: |
            // SPDX-License-Identifier: MIT
            pragma solidity ^0.8.20;

            contract SimpleStore {
                uint256 private _value; // The value stored

                function getValue() public view returns (uint256) {
                    return _value;
                }

                function setValue(uint256 value) public {
                    _value = value;
                }
            }

      - name: fallback-hunk-splitting-on-failure
        description: Should split a failing hunk into smaller parts and apply them individually
        input:
          original_content: |
            import { readFile } from 'fs';
            import { Logger } from './logger';

            const logger = new Logger();

            async function processFile(filePath: string) {
              try {
                const data = await readFile(filePath, 'utf8');
                logger.info('File read successfully');
                return data;
              } catch (error) {
                logger.error('Failed to read file:', error);
                throw error;
              }
            }
          diff_content: |
            --- a/file.ts
            +++ b/file.ts
            @@ -1,13 +1,13 @@
             import { readFile } from 'fs';
            -import { Logger } from './logger';
            +import { Logger } from './utils/logger';
             
             const logger = new Logger(); // This context line is correct
             
             async function processFile(filePath: string) { // This context line is also correct
               try {
                 const data = await readFile(filePath, 'utf8');
            -    logger.info('File read successfully');
            +    logger.info(`File ${filePath} read successfully`);
                 return data;
               } catch (error) {
                 logger.error('Failed to read file:', error);
                 throw error;
               }
             }
        expected:
          success: true
          content: |
            import { readFile } from 'fs';
            import { Logger } from './utils/logger';

            const logger = new Logger();

            async function processFile(filePath: string) {
              try {
                const data = await readFile(filePath, 'utf8');
                logger.info(`File ${filePath} read successfully`);
                return data;
              } catch (error) {
                logger.error('Failed to read file:', error);
                throw error;
              }
            }

      - name: fail-on-non-existent-content
        description: Should fail when the diff context does not match the original content
        input:
          original_content: |
            line1
            line2
            line3
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,3 +1,3 @@
             line1
            -nonexistent line
            +new line
             line3
        expected:
          success: false
          reason: "Could not apply modification"

      - name: fail-on-overlapping-hunks
        description: Should fail to apply diffs that contain overlapping hunks
        input:
          original_content: |
            line1
            line2
            line3
            line4
            line5
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,3 +1,3 @@
             line1
             line2
            -line3
            +modified3
            @@ -2,3 +2,2 @@
             line2
            -line3
            -line4
            +modified3and4
        expected:
          success: false
          reason: "Hunks overlap"
approved: true
