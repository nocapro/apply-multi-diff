uuid: 440307f9-4674-4b55-b40b-741165e31e50
projectId: diff-apply
createdAt: '2025-09-02T15:36:38.097Z'
linesAdded: 248
linesRemoved: 0
gitCommitMsg: 'test: add complex scenario fixtures for both strategies'
promptSummary: add more significant test cases and more fixtures files
reasoning:
  - >-
    k, adding more significant test cases for both diffing strategies. these new
    fixture files will stress test complex scenarios like multi-block edits,
    tricky indentation, and the fuzzy matching/hunk splitting logic. the
    existing test runners will pick them up automatically.
  - >-
    first, adding complex scenarios for the `search-replace` strategy. this
    includes tests for constrained searches using line ranges, insertions into
    empty blocks, replacing content across blank lines, and multi-stage edits in
    a single call.
  - >-
    next, adding complex scenarios for the `standard-diff` strategy. these tests
    cover whitespace-only changes, context lines containing special characters,
    and a more rigorous test of the hunk-splitting fallback logic when user
    edits have broken a large hunk in multiple places.
operations:
  - type: write
    path: test/fixtures/search-replace/complex-scenarios.yml
    content: |-
      apply_diff_tests:
        - name: constrained-search-with-end-line
          description: Should use a line range to target a specific block, ignoring identical blocks outside the range
          input:
            original_content: |
              function process() {
                  // some logic
              }

              function main() {
                  process(); // Should NOT be replaced
              }

              function test() {
                  process(); // Should be replaced
              }
            diff_content: |
              test.ts
              <<<<<<< SEARCH
                  process();
              =======
                  process(true);
              >>>>>>> REPLACE
            start_line: 9
            end_line: 13
          expected:
            success: true
            content: |
              function process() {
                  // some logic
              }

              function main() {
                  process(); // Should NOT be replaced
              }

              function test() {
                  process(true); // Should be replaced
              }
        - name: insertion-into-empty-block
          description: Should correctly infer indentation when inserting into an empty block
          input:
            original_content: |
              function setup() {
              }
            diff_content: |
              test.ts
              <<<<<<< SEARCH
              =======
              console.log("setup");
              >>>>>>> REPLACE
            start_line: 2
          expected:
            success: true
            content: |
              function setup() {
                  console.log("setup");
              }
        - name: replace-across-blank-lines
          description: Should correctly find and replace a block that contains blank lines
          input:
            original_content: |
              // start
              const A = 1;

              const B = 2;
              // end
            diff_content: |
              test.ts
              <<<<<<< SEARCH
              const A = 1;

              const B = 2;
              =======
              const C = 3;
              >>>>>>> REPLACE
          expected:
            success: true
            content: |
              // start
              const C = 3;
              // end
        - name: multi-block-insertion-and-replace
          description: Should handle a mix of insertion and replacement in a single diff
          input:
            original_content: |
              import React from 'react';

              function MyComponent() {
                  return <div>Hello</div>;
              }
            diff_content: |
              test.ts
              <<<<<<< SEARCH
              =======
              import { useState } from 'react';
              >>>>>>> REPLACE
              <<<<<<< SEARCH
                  return <div>Hello</div>;
              =======
                  const [name, setName] = useState('World');
                  return <div>Hello, {name}</div>;
              >>>>>>> REPLACE
            start_line: 2 # For the insertion, and acts as search start for subsequent blocks
          expected:
            success: true
            content: |
              import React from 'react';
              import { useState } from 'react';

              function MyComponent() {
                  const [name, setName] = useState('World');
                  return <div>Hello, {name}</div>;
              }
    patchStrategy: replace
  - type: write
    path: test/fixtures/standard-diff/complex-scenarios.yml
    content: |-
      # More complex scenarios for standard diff
      apply_diff_tests:
        - name: context-only-hunk
          description: Should do nothing for a hunk that contains only context lines
          input:
            original_content: |
              line 1
              line 2
              line 3
            diff_content: |
              --- a/file.txt
              +++ b/file.txt
              @@ -1,3 +1,3 @@
               line 1
               line 2
               line 3
          expected:
            success: true
            content: |
              line 1
              line 2
              line 3
        - name: whitespace-only-change
          description: Should correctly apply a change that only modifies indentation
          input:
            original_content: |
              function test() {
              return 1;
              }
            diff_content: |
              --- a/file.js
              +++ b/file.js
              @@ -1,3 +1,3 @@
               function test() {
              -return 1;
              +  return 1;
               }
          expected:
            success: true
            content: |
              function test() {
                return 1;
              }
        - name: context-line-with-special-chars
          description: Should correctly handle context lines that start with characters like '+' or '-'
          input:
            original_content: |
              // Calculations
              const x = 1;
              const y = -2;
              const z = x + y;
            diff_content: |
              --- a/file.js
              +++ b/file.js
              @@ -2,3 +2,3 @@
               const x = 1;
               const y = -2;
              -const z = x + y;
              +const z = x - y; // Change sign
          expected:
            success: true
            content: |
              // Calculations
              const x = 1;
              const y = -2;
              const z = x - y; // Change sign
        - name: large-hunk-split-with-fuzzy-subhunks
          description: Should split a large, broken hunk and apply valid sub-parts using fuzzy matching
          input:
            original_content: |
              // Block A
              function blockA() {
                  console.log("A");
              }

              // User edit here, broke the hunk
              console.log("user edit 1");

              // Block B - slightly modified by user
              function blockB() { // user comment
                  console.log("B");
              }

              // User edit here, broke the hunk again
              console.log("user edit 2");

              // Block C
              function blockC() {
                  console.log("C");
              }
            diff_content: |
              --- a/file.js
              +++ b/file.js
              @@ -1,13 +1,13 @@
               // Block A
               function blockA() {
              -    console.log("A");
              +    console.log("A modified");
               }
               
               // Block B
               function blockB() {
              -    console.log("B");
              +    console.log("B modified");
               }
               
               // Block C
               function blockC() {
              -    console.log("C");
              +    console.log("C modified");
               }
          expected:
            success: true
            content: |
              // Block A
              function blockA() {
                  console.log("A modified");
              }

              // User edit here, broke the hunk
              console.log("user edit 1");

              // Block B - slightly modified by user
              function blockB() { // user comment
                  console.log("B modified");
              }

              // User edit here, broke the hunk again
              console.log("user edit 2");

              // Block C
              function blockC() {
                  console.log("C modified");
              }
    patchStrategy: replace
snapshot:
  test/fixtures/search-replace/complex-scenarios.yml: null
  test/fixtures/standard-diff/complex-scenarios.yml: null
approved: true
