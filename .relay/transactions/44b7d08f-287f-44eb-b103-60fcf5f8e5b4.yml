uuid: 44b7d08f-287f-44eb-b103-60fcf5f8e5b4
projectId: diff-apply
createdAt: '2025-09-02T15:19:16.566Z'
linesAdded: 102
linesRemoved: 0
gitCommitMsg: 'test: add more edge case tests for diff strategies'
promptSummary: Add more test cases to battle test the diffing logic.
reasoning:
  - >-
    ok, got it. adding more test cases to the YAML fixtures to harden the
    diffing logic. battle testing is good.
  - >-
    first, i'll add more edge cases to `search-replace.yml`. this will test
    things like removing blank lines, handling special regex characters in
    content, unicode, and fine-tuning the fuzzy matching logic for string
    literals.
  - >-
    next, i'll do the same for `standard-diff.yml`. these tests will cover pure
    insertions at the start of a file, unicode characters, and handling of
    trailing newlines.
operations:
  - type: write
    path: test/fixtures/search-replace.yml
    content: >-
      --- test/fixtures/search-replace.yml

      +++ test/fixtures/search-replace.yml

      @@ -298,3 +298,63 @@
             success: true
             content: |
               const y = 2;
      +

      +  - name: remove-extra-blank-lines

      +    description: Should be able to search for and remove only whitespace

      +    input:

      +      original_content: |

      +        line 1

      +

      +

      +        line 2

      +      diff_content: |

      +        test.ts

      +        <<<<<<< SEARCH

      +

      +        =======

      +        >>>>>>> REPLACE

      +    expected:

      +      success: true

      +      content: |

      +        line 1

      +

      +        line 2

      +

      +  - name: replace-with-regex-special-chars

      +    description: Should correctly replace content that contains special
      regex characters

      +    input:

      +      original_content: "const x = arr[0] + (y || 0);"

      +      diff_content: |

      +        test.ts

      +        <<<<<<< SEARCH

      +        arr[0] + (y || 0)

      +        =======

      +        arr[0] * (y || 1)

      +        >>>>>>> REPLACE

      +    expected:

      +      success: true

      +      content: "const x = arr[0] * (y || 1);"

      +

      +  - name: unicode-characters-replace

      +    description: Should correctly handle files with unicode characters in
      search and replace

      +    input:

      +      original_content: "const greeting = '你好世界';"

      +      diff_content: |

      +        test.ts

      +        <<<<<<< SEARCH

      +        '你好世界'

      +        =======

      +        'こんにちは世界'

      +        >>>>>>> REPLACE

      +    expected:

      +      success: true

      +      content: "const greeting = 'こんにちは世界';"

      +

      +  - name: fuzzy-match-accept-minor-string-literal-change

      +    description: Should accept a fuzzy match with a minor, non-semantic
      change in a string literal

      +    input:

      +      original_content: |

      +        logger.error("Failed to connect to database!"); // User added
      exclamation

      +      diff_content: |

      +        test.ts

      +        <<<<<<< SEARCH

      +        logger.error("Failed to connect to database");

      +        =======

      +        Sentry.captureMessage("Failed to connect to database!");

      +        >>>>>>> REPLACE

      +    expected:

      +      success: true

      +      content: |

      +        Sentry.captureMessage("Failed to connect to database!"); // User
      added exclamation
    patchStrategy: new-unified
  - type: write
    path: test/fixtures/standard-diff.yml
    content: >-
      --- test/fixtures/standard-diff.yml

      +++ test/fixtures/standard-diff.yml

      @@ -321,3 +321,37 @@
           expected:
             success: false
             reason: "Could not apply modification"
      +

      +  - name: pure-insertion-at-start

      +    description: Should correctly insert content at the beginning of a
      file

      +    input:

      +      original_content: |

      +        line 1

      +        line 2

      +      diff_content: |

      +        --- a/file.txt

      +        +++ b/file.txt

      +        @@ -0,0 +1,2 @@

      +        +new line 1

      +        +new line 2

      +    expected:

      +      success: true

      +      content: |

      +        new line 1

      +        new line 2

      +        line 1

      +        line 2

      +

      +  - name: unicode-characters

      +    description: Should correctly handle files with unicode characters

      +    input:

      +      original_content: "你好世界"

      +      diff_content: |

      +        --- a/file.txt

      +        +++ b/file.txt

      +        @@ -1 +1 @@

      +        -你好世界

      +        +こんにちは世界

      +    expected:

      +      success: true

      +      content: "こんにちは世界"
    patchStrategy: new-unified
snapshot:
  test/fixtures/search-replace.yml: |
    # Tests for the `getToolDescription` function
    tool_description_tests:
      - name: description-contains-key-elements
        description: Should generate a description that includes the CWD and format requirements
        input:
          cwd: "/mock/workspace"
        expected_to_contain:
          - "current working directory /mock/workspace"
          - "<<<<<<< SEARCH"
          - "======="
          - ">>>>>>> REPLACE"
          - "start_line"
          - "end_line"

    # Tests for the `applyDiff` function
    apply_diff_tests:
      - name: replace-exact-match
        description: Should replace content that is an exact match
        input:
          original_content: |
            function hello() {
                console.log("hello")
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            function hello() {
                console.log("hello")
            }
            =======
            function hello() {
                console.log("hello world");
            }
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            function hello() {
                console.log("hello world");
            }

      - name: preserve-indentation-on-addition
        description: Should preserve original indentation when adding new lines
        input:
          original_content: |
            class Example {
                getValue() {
                    return this.value
                }
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
                getValue() {
                    return this.value
                }
            =======
                getValue() {
                    // Add logging
                    console.log("Getting value");
                    return this.value;
                }
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            class Example {
                getValue() {
                    // Add logging
                    console.log("Getting value");
                    return this.value;
                }
            }

      - name: fuzzy-match-on-minor-difference
        description: Should find and replace content that is slightly different from the search block
        input:
          original_content: |
            function calculate() {
              // A comment
              const result = 1 + 1;
              return result;
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
              // An old comment
              const result = 1 + 1;
            =======
              const result = 2 * 2; // updated logic
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            function calculate() {
              const result = 2 * 2; // updated logic
              return result;
            }

      - name: fail-on-no-match
        description: Should fail gracefully if the search content does not match
        input:
          original_content: |
            function hello() {
                console.log("hello")
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            function hello() {
                console.log("wrong")
            }
            =======
            function hello() {
                console.log("hello world")
            }
            >>>>>>> REPLACE
        expected:
          success: false
          reason: "Search block not found"

      - name: indentation-agnostic-search-and-preserve
        description: Should find content regardless of its indentation and preserve it on replace
        input:
          original_content: |
                function test() {
                    return true;
                }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            function test() {
                return true;
            }
            =======
            function test() {
                return false;
            }
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
                function test() {
                    return false;
                }

      - name: respect-relative-indentation-in-replace
        description: Should respect the relative indentation inside the REPLACE block
        input:
          original_content: |
            class Test {
                method() {
                    console.log("test");
                }
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
                method() {
                    console.log("test");
                }
            =======
                method() {
                    try {
                        if (true) {
                            console.log("test");
                        }
                    } catch (e) {
                        console.error(e);
                    }
                }
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            class Test {
                method() {
                    try {
                        if (true) {
                            console.log("test");
                        }
                    } catch (e) {
                        console.error(e);
                    }
                }
            }

      - name: fail-on-invalid-format
        description: Should fail gracefully if the diff format is invalid
        input:
          original_content: "function hello() {}"
          diff_content: "This is not a valid format"
        expected:
          success: false
          reason: "Invalid diff format"

      - name: strip-line-numbers
        description: Should strip leading line numbers from search and replace blocks
        input:
          original_content: "    return true;"
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            2 |     return true;
            =======
            2 |     return false; // A comment
            >>>>>>> REPLACE
        expected:
          success: true
          content: "    return false; // A comment"

      - name: insertion-with-start-line
        description: Should insert code at a specific line when the search block is empty
        input:
          original_content: |
            function test() {
                const x = 1;
                return x;
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            =======
                console.log("Adding log");
            >>>>>>> REPLACE
          start_line: 2
          end_line: 2
        expected:
          success: true
          content: |
            function test() {
                console.log("Adding log");
                const x = 1;
                return x;
            }

      - name: insertion-fail-without-line-number
        description: Should fail an insertion if no start_line is provided
        input:
          original_content: "function test() {}"
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            =======
            console.log("test");
            >>>>>>> REPLACE
        expected:
          success: false
          reason: "Insertion requires a start_line"

      - name: deletion
        description: Should delete code when the replace block is empty
        input:
          original_content: |

            function test() {
                // Comment to remove
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
                // Comment to remove
            =======
            >>>>>>> REPLACE
        expected:
          success: true
          content: |

            function test() {
            }

      - name: constrained-search-target-specific-duplicate
        description: Should use line numbers to target a specific instance of duplicate code
        input:
          original_content: |
            // Instance 1
            processData();

            // Instance 2
            processData();
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            processData();
            =======
            processData(config);
            >>>>>>> REPLACE
          start_line: 5
          end_line: 5
        expected:
          success: true
          content: |
            // Instance 1
            processData();

            // Instance 2
            processData(config);

      - name: multiple-blocks-in-one-call
        description: Should process multiple search/replace blocks in a single operation
        input:
          original_content: |
            const a = "apple";
            const b = "banana";
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            const a = "apple";
            =======
            const a = "apricot";
            >>>>>>> REPLACE
            <<<<<<< SEARCH
            const b = "banana";
            =======
            const b = "blueberry";
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            const a = "apricot";
            const b = "blueberry";

      - name: fuzzy-match-rejection-on-string-literal-change
        description: Should reject a fuzzy match that changes the semantic meaning of a string literal
        input:
          original_content: |
            logger.error("Failed to connect to database");
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            logger.error("Failed to load configuration");
            =======
            Sentry.captureMessage("Failed to load configuration");
            >>>>>>> REPLACE
        expected:
          success: false
          reason: "Search block not found"

      - name: replace-with-complex-relative-indentation
        description: Should correctly re-indent a replacement block with multiple indentation levels
        input:
          original_content: |
            function outer() {
                if (condition) {
                    process();
                }
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            process();
            =======
            if (anotherCondition) {
                process();
            } else {
                fallback();
            }
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            function outer() {
                if (condition) {
                    if (anotherCondition) {
                        process();
                    } else {
                        fallback();
                    }
                }
            }

      - name: empty-file-insertion
        description: Should insert content into an empty file without extra newlines
        input:
          original_content: ""
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            =======
            Hello, World!
            >>>>>>> REPLACE
          start_line: 1
        expected:
          success: true
          content: "Hello, World!"

      - name: first-of-ambiguous-match-is-replaced
        description: Should replace the first occurrence of an ambiguous match when no line numbers are given
        input:
          original_content: |
            config.set("value", 1);
            // ... lots of code
            config.set("value", 1);
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            config.set("value", 1);
            =======
            config.set("value", 2);
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            config.set("value", 2);
            // ... lots of code
            config.set("value", 1);

      - name: replace-at-start-of-file
        description: Should correctly replace content at the very beginning of the file
        input:
          original_content: |
            // Header
            function start() {}
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            // Header
            =======
            // New Header
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            // New Header
            function start() {}

      - name: replace-at-end-of-file
        description: Should correctly replace content at the very end of the file
        input:
          original_content: |
            function start() {}
            // Footer
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            // Footer
            =======
            // New Footer
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            function start() {}
            // New Footer

      - name: sequential-overlapping-replace
        description: Should handle sequential replacements where the second depends on the first
        input:
          original_content: |
            function one() {
                return 1;
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            function one() {
                return 1;
            }
            =======
            function two() {
                return 2;
            }
            >>>>>>> REPLACE
            <<<<<<< SEARCH
            function two() {
            =======
            function two() { // Renamed
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            function two() { // Renamed
                return 2;
            }

      - name: insertion-with-inferred-indentation
        description: Should insert code and correctly apply surrounding indentation
        input:
          original_content: |
            function outer() {
                if (true) {
                    // marker
                }
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            =======
            console.log("inserted");
            >>>>>>> REPLACE
          start_line: 3
        expected:
          success: true
          content: |
            function outer() {
                if (true) {
                    console.log("inserted");
                    // marker
                }
            }

      - name: fuzzy-delete
        description: Should delete a block of code even with minor differences
        input:
          original_content: |
            function hello() {
                // This is a very important comment
                console.log("hello");
            }
          diff_content: |
            test.ts
            <<<<<<< SEARCH
                // This is an important comment
                console.log("hello");
            =======
            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            function hello() {
            }

      - name: replace-block-with-trailing-newline
        description: Should correctly handle a replace block that ends with a newline
        input:
          original_content: |
            const x = 1;
          diff_content: |
            test.ts
            <<<<<<< SEARCH
            const x = 1;
            =======
            const y = 2;

            >>>>>>> REPLACE
        expected:
          success: true
          content: |
            const y = 2;
  test/fixtures/standard-diff.yml: |-
    # Tests for the `getToolDescription` function
    tool_description_tests:
      - name: description-contains-key-elements
        description: Should generate a description that includes CWD and standard diff format markers
        input:
          cwd: "/mock/workspace"
        expected_to_contain:
          - "current working directory /mock/workspace"
          - "--- a/src/component.tsx"
          - "+++ b/src/component.tsx"
          - "@@ ... @@"

    # Tests for the `applyDiff` function
    apply_diff_tests:
      - name: simple-modification
        description: Should apply a simple modification, addition, and deletion correctly
        input:
          original_content: |
            line1
            line2
            line3
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,3 +1,4 @@
             line1
            +new line
             line2
            -line3
            +modified line3
        expected:
          success: true
          content: |
            line1
            new line
            line2
            modified line3

      - name: multiple-hunks
        description: Should correctly apply a diff with multiple, non-contiguous hunks
        input:
          original_content: |
            line1
            line2
            line3
            line4
            line5
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,2 +1,2 @@
             line1
            -line2
            +modified line2
            @@ -4,2 +4,2 @@
             line4
            -line5
            +modified line5
        expected:
          success: true
          content: |
            line1
            modified line2
            line3
            line4
            modified line5

      - name: correct-modification-with-similar-code
        description: Should correctly modify the right section when similar code exists elsewhere
        input:
          original_content: |
            function add(a, b) {
              return a + b;
            }

            function multiply(a, b) {
              return a + b;  // Bug here
            }
          diff_content: |
            --- a/math.js
            +++ b/math.js
            @@ -5,3 +5,3 @@
             function multiply(a, b) {
            -  return a + b;  // Bug here
            +  return a * b;
             }
        expected:
          success: true
          content: |
            function add(a, b) {
              return a + b;
            }

            function multiply(a, b) {
              return a * b;
            }

      - name: handle-indentation-changes
        description: Should correctly handle changes involving different types of indentation
        input:
          original_content: |
            function example() {
              let a = 1;
                let b = 2;
            }
          diff_content: |
            --- a/file.js
            +++ b/file.js
            @@ -1,4 +1,5 @@
             function example() {
               let a = 1;
            +  // new line
                 let b = 2;
             }
        expected:
          success: true
          content: |
            function example() {
              let a = 1;
              // new line
                let b = 2;
            }

      - name: handle-empty-lines-modification
        description: Should correctly apply changes that involve empty lines
        input:
          original_content: |
            line1

            line3
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,3 +1,3 @@
             line1
             
            -line3
            +line3-modified
        expected:
          success: true
          content: |
            line1

            line3-modified
      
      - name: fuzzy-match-with-drifted-context
        description: Should apply a hunk correctly even if the context has minor changes
        input:
          original_content: |
            // SPDX-License-Identifier: MIT
            pragma solidity ^0.8.20;

            contract SimpleStore {
                uint256 private _value; // The value stored

                function setValue(uint256 value) public {
                    _value = value;
                }
            }
          diff_content: |
            --- a/SimpleStore.sol
            +++ b/SimpleStore.sol
            @@ -3,6 +3,10 @@
             
             contract SimpleStore {
                 uint256 private _value; // The value stored
            +
            +    function getValue() public view returns (uint256) {
            +        return _value;
            +    }
             
                 function setValue(uint256 value) public {
                     _value = value;
        expected:
          success: true
          content: |
            // SPDX-License-Identifier: MIT
            pragma solidity ^0.8.20;

            contract SimpleStore {
                uint256 private _value; // The value stored

                function getValue() public view returns (uint256) {
                    return _value;
                }

                function setValue(uint256 value) public {
                    _value = value;
                }
            }

      - name: fallback-hunk-splitting-on-failure
        description: Should split a failing hunk into smaller parts and apply them individually
        input:
          original_content: |
            import { readFile } from 'fs';
            import { Logger } from './logger';

            const logger = new Logger();

            async function processFile(filePath: string) {
              try {
                const data = await readFile(filePath, 'utf8');
                logger.info('File read successfully');
                return data;
              } catch (error) {
                logger.error('Failed to read file:', error);
                throw error;
              }
            }
          diff_content: |
            --- a/file.ts
            +++ b/file.ts
            @@ -1,13 +1,13 @@
             import { readFile } from 'fs';
            -import { Logger } from './logger';
            +import { Logger } from './utils/logger';
             
             const logger = new Logger(); // This context line is correct
             
             async function processFile(filePath: string) { // This context line is also correct
               try {
                 const data = await readFile(filePath, 'utf8');
            -    logger.info('File read successfully');
            +    logger.info(`File ${filePath} read successfully`);
                 return data;
               } catch (error) {
                 logger.error('Failed to read file:', error);
                 throw error;
               }
             }
        expected:
          success: true
          content: |
            import { readFile } from 'fs';
            import { Logger } from './utils/logger';

            const logger = new Logger();

            async function processFile(filePath: string) {
              try {
                const data = await readFile(filePath, 'utf8');
                logger.info(`File ${filePath} read successfully`);
                return data;
              } catch (error) {
                logger.error('Failed to read file:', error);
                throw error;
              }
            }

      - name: fail-on-non-existent-content
        description: Should fail when the diff context does not match the original content
        input:
          original_content: |
            line1
            line2
            line3
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,3 +1,3 @@
             line1
            -nonexistent line
            +new line
             line3
        expected:
          success: false
          reason: "Could not apply modification"

      - name: pure-insertion-after-line
        description: Should correctly apply a hunk that only contains additions after a specific line
        input:
          original_content: |
            line 1
            line 3
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,0 +2,1 @@
            +line 2
        expected:
          success: true
          content: |
            line 1
            line 2
            line 3

      - name: pure-deletion-hunk
        description: Should correctly apply a hunk that only contains deletions
        input:
          original_content: |
            line 1
            line 2 to delete
            line 3
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,3 +1,2 @@
             line 1
            -line 2 to delete
             line 3
        expected:
          success: true
          content: |
            line 1
            line 3

      - name: apply-to-empty-file
        description: Should correctly apply a diff to an empty file (file creation)
        input:
          original_content: ""
          diff_content: |
            --- /dev/null
            +++ b/file.txt
            @@ -0,0 +1,3 @@
            +Hello
            +World
            +!
        expected:
          success: true
          content: |
            Hello
            World
            !

      - name: delete-all-content
        description: Should correctly empty a file when the diff removes all lines
        input:
          original_content: |
            line 1
            line 2
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,2 +0,0 @@
            -line 1
            -line 2
        expected:
          success: true
          content: ""

      - name: modify-start-of-file
        description: Should correctly apply a hunk that modifies the beginning of the file
        input:
          original_content: |
            first line
            second line
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,2 +1,2 @@
            -first line
            +modified first line
             second line
        expected:
          success: true
          content: |
            modified first line
            second line

      - name: add-to-file-without-trailing-newline
        description: Should correctly add content to a file that lacks a trailing newline
        input:
          original_content: "line 1"
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1 +1,2 @@
             line 1
            +line 2
        expected:
          success: true
          content: |
            line 1
            line 2

      - name: fail-on-overlapping-hunks
        description: Should fail to apply diffs that contain overlapping hunks
        input:
          original_content: |
            line1
            line2
            line3
            line4
            line5
          diff_content: |
            --- a/file.txt
            +++ b/file.txt
            @@ -1,3 +1,3 @@
             line1
             line2
            -line3
            +modified3
            @@ -2,3 +2,2 @@
             line2
            -line3
            -line4
            +modified3and4
        expected:
          success: false
          reason: "Hunks overlap"

      - name: fuzzy-match-with-actual-drift
        description: Should apply a hunk using fuzzy matching when context has drifted due to new comments
        input:
          original_content: |
            // User added a comment here
            class MyComponent extends React.Component {
              render() {
                const { value } = this.props;
                // And another comment here
                return <div>{value}</div>;
              }
            }
          diff_content: |
            --- a/component.jsx
            +++ b/component.jsx
            @@ -2,5 +2,5 @@
             class MyComponent extends React.Component {
               render() {
                 const { value } = this.props;
            -    return <div>{value}</div>;
            +    return <p>{value}</p>;
               }
             }
        expected:
          success: true
          content: |
            // User added a comment here
            class MyComponent extends React.Component {
              render() {
                const { value } = this.props;
                // And another comment here
                return <p>{value}</p>;
              }
            }

      - name: hunk-splitting-with-intermediate-user-edit
        description: Should succeed by splitting a hunk when a user edit breaks its contiguity
        input:
          original_content: |
            function setup() {
                console.log("Initializing part 1...");
                // init
            }

            // User added a new function here, breaking the hunk's contiguity
            function helper() {
                return true;
            }

            function tearDown() {
                console.log("Tearing down part 3...");
                // teardown
            }
          diff_content: |
            --- a/file.js
            +++ b/file.js
            @@ -1,8 +1,8 @@
             function setup() {
            -    console.log("Initializing part 1...");
            -    // init
            +    console.log("Initializing part 1... DONE");
            +    // initialize
             }
             
             function tearDown() {
            -    console.log("Tearing down part 3...");
            -    // teardown
            +    console.log("Tearing down part 3... DONE");
            +    // deinitialize
             }
        expected:
          success: true
          content: |
            function setup() {
                console.log("Initializing part 1... DONE");
                // initialize
            }

            // User added a new function here, breaking the hunk's contiguity
            function helper() {
                return true;
            }

            function tearDown() {
                console.log("Tearing down part 3... DONE");
                // deinitialize
            }

      - name: hunk-splitting-failure
        description: Should fail if a sub-hunk fails to apply after splitting
        input:
          original_content: |
            function partA() {
                // some code A
            }
            function partB() {
                // completely different code B
            }
          diff_content: |
            --- a/file.js
            +++ b/file.js
            @@ -1,5 +1,5 @@
             function partA() {
            -    // some code A
            +    // new code A
             }
             function partB() {
            -    // some code B
            +    // new code B
             }
        expected:
          success: false
          reason: "Could not apply modification"
approved: true
